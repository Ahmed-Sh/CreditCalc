import argparse
import math
import sys




class CreditCalc:

    def __init__(self):
        self.interest = float(args.interest)

    def action_needed(self):
        if args.type == "diff":
            self.diff_payment()
        elif args.type == "annuity":
            if args.principal and args.payment:
                self.month_count()
            elif args.principal and args.periods:
                self.annuity_payment()
            elif args.payment and args.periods:
                self.credit_pr()


    def diff_payment(self):
        if args.payment:
            print("Incorrect parameters.")
        else:
            p = int(args.principal)
            n =  int(args.periods)
            # nominal interest rate
            i = (self.interest / (12 * 100))
            total = 0
            # Differentiate payment
            for m in range (1, (n + 1)):
                d = math.ceil((p / n) + i * (p - ((p * (m - 1)) / n)))
                print(f"month {m}: paid out {d}")
                total += d
            print(f"Overpayment = {total - p}")


    def annuity_payment(self):
        p = int(args.principal)
        n =  int(args.periods)
        # nominal interest rate
        i = (self.interest / (12 * 100))
        # annuity payment
        a = math.ceil(p * (i * math.pow((1 + i), n)) / ((math.pow((1 + i), n)) - 1))
        print(f"Your annuity payment = {a} !")
        over_payment = int((a * n) - p)
        print(f"Overpayment = {over_payment}")

    def credit_pr(self):
        a =  float(args.payment)
        n =  int(args.periods)
        # nominal interest rate
        i = (self.interest / (12 * 100))
        # credit principal
        p = round((a / ((i * math.pow((1+i), n)) / (math.pow((1+i), n) - 1))))
        print(f"Your credit principal = {p} !")
        over_payment = int((a * n) - p)
        print(f"Overpayment = {over_payment}")

    def month_count(self):
        p = int(args.principal)
        a =  float(args.payment)
        # nominal interest rate
        i = (self.interest / (12 * 100))
        # count of period
        n = math.ceil(math.log((a / (a - (i * p))), (1 + i)))
        if n % 12 == 0:
            print(f"you need {int(n / 12)} years to repay this credit!")
        elif (n / 12) < 1:
            print(f"you need {int(n % 12)} months to repay this credit")
        else:
            print(f"you need {int(n // 12)} years and {n % 12} months to repay this credit")
        over_payment = int((a * n) - p)
        print(f"Overpayment = {over_payment}")


parser = argparse.ArgumentParser()
parser.add_argument("--type")
parser.add_argument("--principal")
parser.add_argument("--periods")
parser.add_argument("--interest")
parser.add_argument("--payment")
args = parser.parse_args()
my_input = sys.argv
my_args = []
args_values = []
for data in my_input[2:]:
    my_args.append(data.split("="))
for x, y in my_args:
    args_values.append(float(y))
if len(sys.argv) == 5 and args.interest and min(args_values) >= 0 and (args.type == "diff" or "annuity"):
    calc = CreditCalc()
    calc.action_needed()
else:
    print("Incorrect parameters.")
